<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LC-Solution 811. Subdomain Visit Count</title>
    <link href="/2022/10/05/LC-Solution-811-Subdomain-Visit-Count/"/>
    <url>/2022/10/05/LC-Solution-811-Subdomain-Visit-Count/</url>
    
    <content type="html"><![CDATA[<h1 id="811-子域名访问计数"><a href="#811-子域名访问计数" class="headerlink" title="811. 子域名访问计数"></a><a href="https://leetcode.cn/problems/subdomain-visit-count/">811. 子域名访问计数</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>网站域名 <code>&quot;discuss.leetcode.com&quot;</code> 由多个子域名组成。顶级域名为 <code>&quot;com&quot;</code> ，二级域名为 <code>&quot;leetcode.com&quot;</code> ，最低一级为 <code>&quot;discuss.leetcode.com&quot;</code> 。当访问域名 <code>&quot;discuss.leetcode.com&quot;</code> 时，同时也会隐式访问其父域名 <code>&quot;leetcode.com&quot;</code> 以及 <code>&quot;com&quot;</code> 。</p><p><strong>计数配对域名</strong> 是遵循 <code>&quot;rep d1.d2.d3&quot;</code> 或 <code>&quot;rep d1.d2&quot;</code> 格式的一个域名表示，其中 <code>rep</code> 表示访问域名的次数，<code>d1.d2.d3</code> 为域名本身。</p><p>例如，<code>&quot;9001 discuss.leetcode.com&quot;</code> 就是一个 <strong>计数配对域名</strong> ，表示 <code>discuss.leetcode.com</code> 被访问了 <code>9001</code> 次。<br>给你一个 <strong>计数配对域名</strong> 组成的数组 <code>cpdomains</code> ，解析得到输入中每个子域名对应的 <strong>计数配对域名</strong> ，并以数组形式返回。可以按 <strong>任意顺序</strong> 返回答案。</p><p><strong>示例1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：cpdomains = [<span class="hljs-string">&quot;9001 discuss.leetcode.com&quot;</span>]<br>输出：[<span class="hljs-string">&quot;9001 leetcode.com&quot;</span>,<span class="hljs-string">&quot;9001 discuss.leetcode.com&quot;</span>,<span class="hljs-string">&quot;9001 com&quot;</span>]<br>解释：例子中仅包含一个网站域名：<span class="hljs-string">&quot;discuss.leetcode.com&quot;</span>。<br>按照前文描述，子域名 <span class="hljs-string">&quot;leetcode.com&quot;</span> 和 <span class="hljs-string">&quot;com&quot;</span> 都会被访问，所以它们都被访问了 <span class="hljs-number">9001</span> 次。<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：cpdomains = [<span class="hljs-string">&quot;900 google.mail.com&quot;</span>, <span class="hljs-string">&quot;50 yahoo.com&quot;</span>, <span class="hljs-string">&quot;1 intel.mail.com&quot;</span>, <span class="hljs-string">&quot;5 wiki.org&quot;</span>]<br>输出：[<span class="hljs-string">&quot;901 mail.com&quot;</span>,<span class="hljs-string">&quot;50 yahoo.com&quot;</span>,<span class="hljs-string">&quot;900 google.mail.com&quot;</span>,<span class="hljs-string">&quot;5 wiki.org&quot;</span>,<span class="hljs-string">&quot;5 org&quot;</span>,<span class="hljs-string">&quot;1 intel.mail.com&quot;</span>,<span class="hljs-string">&quot;951 com&quot;</span>]<br>解释：按照前文描述，会访问 <span class="hljs-string">&quot;google.mail.com&quot;</span> <span class="hljs-number">900</span> 次，<span class="hljs-string">&quot;yahoo.com&quot;</span> <span class="hljs-number">50</span> 次，<span class="hljs-string">&quot;intel.mail.com&quot;</span> <span class="hljs-number">1</span> 次，<span class="hljs-string">&quot;wiki.org&quot;</span> <span class="hljs-number">5</span> 次。<br>而对于父域名，会访问 <span class="hljs-string">&quot;mail.com&quot;</span> <span class="hljs-number">900</span> + <span class="hljs-number">1</span> = <span class="hljs-number">901</span> 次，<span class="hljs-string">&quot;com&quot;</span> <span class="hljs-number">900</span> + <span class="hljs-number">50</span> + <span class="hljs-number">1</span> = <span class="hljs-number">951</span> 次，和 <span class="hljs-string">&quot;org&quot;</span> <span class="hljs-number">5</span> 次。<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li><p><code>1 &lt;= cpdomain.length &lt;= 100</code></p></li><li><p><code>1 &lt;= cpdomain[i].length &lt;= 100</code></p></li><li><p><code>cpdomain[i]</code> 会遵循 <code>&quot;repi d1i.d2i.d3i&quot;</code> 或 <code>&quot;repi d1i.d2i&quot;</code> 格式</p></li><li><p><code>repi</code> 是范围 <code>[1, 104]</code> 内的一个整数</p></li><li><p><code>d1i</code>、<code>d2i</code> 和 <code>d3i</code> 由小写英文字母组成</p></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：哈希表"><a href="#方法一：哈希表" class="headerlink" title="方法一：哈希表"></a>方法一：哈希表</h3><p>通过哈希表统计 <code>cpdomains</code> 中所有的子域名的频率。</p><p>以 <code>google.mail.com</code> 为例，<code>google.mail.com</code> 为三级域名，<code>mail.com</code> 为二级域名，<code>com</code>为顶级域名。</p><p>思路如下：</p><ol><li><p>遍历 <code>cpdomains</code> 列表，获取每一个 <code>cpdomain</code> 的访问次数 <code>cnt</code> 与其域名 <code>domain</code></p></li><li><p>将 <code>domain</code> 的访问次数累加至原哈希表</p></li><li><p>继续遍历 <code>domain</code>的子域名字符串</p></li><li><p>若 <code>domain[i] == &#39;.&#39;</code>，说明其之后为一个完整的子域名，将其访问次数累加到哈希表中。</p></li><li><p>遍历结束之后，将哈希表的 <code>K</code> 与 <code>V</code> 以列表的形式返回</p></li></ol><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">subdomainVisits</span>(<span class="hljs-params">self, cpdomains: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>        dic = defaultdict(<span class="hljs-built_in">int</span>)<br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> cpdomains:<br>            ds = d.split()<br>            cnt, domain = <span class="hljs-built_in">int</span>(ds[<span class="hljs-number">0</span>]), ds[<span class="hljs-number">1</span>]<br>            dic[domain] += cnt<br>            <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(domain):<br>                <span class="hljs-keyword">if</span> x == <span class="hljs-string">&#x27;.&#x27;</span>:<br>                    dic[domain[i+<span class="hljs-number">1</span>:]] += cnt<br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;v&#125;</span> <span class="hljs-subst">&#123;k&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> dic.items()]<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第13篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 921. Minumum Add to Make Parentheses Valid</title>
    <link href="/2022/10/04/LC-Solution-921-Minumum-Add-to-Make-Parentheses-Valid/"/>
    <url>/2022/10/04/LC-Solution-921-Minumum-Add-to-Make-Parentheses-Valid/</url>
    
    <content type="html"><![CDATA[<h1 id="921-使括号有效的最少添加"><a href="#921-使括号有效的最少添加" class="headerlink" title="921. 使括号有效的最少添加"></a><a href="https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/">921. 使括号有效的最少添加</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>只有满足下面几点之一，括号字符串才是有效的：</p><ul><li><p>它是一个空字符串，或者</p></li><li><p>它可以被写成 <code>AB</code> （<code>A</code> 与 <code>B</code> 连接）, 其中 <code>A</code> 和 <code>B</code> 都是有效字符串，或者</p></li><li><p>它可以被写作 <code>(A)</code>，其中 <code>A</code> 是有效字符串。</p></li></ul><p>给定一个括号字符串 <code>s</code> ，移动N次，你就可以在字符串的任何位置插入一个括号。</p><p>例如，如果 <code>s = &quot;()))&quot;</code> ，你可以插入一个开始括号为 <code>&quot;(()))&quot;</code> 或结束括号为 <code>&quot;())))&quot;</code> 。<br>返回 为使结果字符串 <code>s</code> 有效而必须添加的最少括号数。</p><p><strong>示例1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;())&quot;</span><br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(((&quot;</span><br>输出：<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 字符。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：栈"><a href="#方法一：栈" class="headerlink" title="方法一：栈"></a>方法一：栈</h3><p>对于成对出现的括号题，合法的每一对括号是具有顺序的，可以直观地想到用栈解决。</p><p>将成对的括号移除出栈，最后栈中保留的一定是无法成对的括号数量，最终栈的大小即为需要添加的括号次数。</p><p>遍历字符串 <code>s</code>：</p><ul><li><p>若 <code>s[i] == &#39;(&#39;</code>，直接入栈。</p></li><li><p>若 <code>s[i] == &#39;)&#39;</code>，且当前栈不为空 and 栈顶元素为 <code>&#39;(&#39;</code>，说明此时构成了一对合法括号，可以将栈顶的 <code>&#39;(&#39;</code>出栈。若不满足此条件，则将 <code>s[i]</code> 入栈</p></li></ul><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minAddToMakeValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        q = deque() <br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> x == <span class="hljs-string">&#x27;(&#x27;</span>:<br>                q.append(x)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> q[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;(&#x27;</span>:<br>                    q.pop()<br>                <span class="hljs-keyword">else</span>:<br>                    q.append(x)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(q)<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minAddToMakeValid</span><span class="hljs-params">(String s)</span> &#123;<br>        Deque&lt;Character&gt; d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> x : s.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span>(x == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                d.addLast(x);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(!d.isEmpty() &amp;&amp; d.peekLast() == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                    d.pollLast();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    d.addLast(x);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> d.size();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二：模拟计数"><a href="#方法二：模拟计数" class="headerlink" title="方法二：模拟计数"></a>方法二：模拟计数</h3><p>根据题意进行模拟，用 <code>cnt</code> 表示 <code>&#39;(&#39;</code>的个数。</p><p>遍历字符串 <code>s</code></p><ul><li><p>若 <code>s[i] == &#39;(&#39;</code>，cnt++</p></li><li><p>若 <code>s[i] == &#39;)&#39;</code>，cnt–，相当于消除一个 <code>&#39;(&#39;</code></p><ul><li>若此时进行 <code>cnt--</code> 操作之后，cnt变为-1，说明 <code>&#39;(&#39;</code>数量不足，需要添加一个 <code>&#39;(&#39;</code>进行额外配对，并将 <code>cnt</code> 重新置为0</li></ul></li></ul><h4 id="Python3-1"><a href="#Python3-1" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minAddToMakeValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        cnt, ans = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> x == <span class="hljs-string">&#x27;(&#x27;</span>:<br>                cnt += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                cnt -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> cnt == -<span class="hljs-number">1</span>:<br>                cnt = <span class="hljs-number">0</span><br>                ans += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans + cnt<br></code></pre></td></tr></table></figure><h4 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minAddToMakeValid</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> x : s.toCharArray()) &#123;<br>            cnt += x == <span class="hljs-string">&#x27;(&#x27;</span> ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(cnt == -<span class="hljs-number">1</span>) &#123;<br>                cnt = <span class="hljs-number">0</span>;<br>                ans++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans + cnt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第12篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 926. Flip String to Monotone Increasing</title>
    <link href="/2022/10/03/LC-Solution-926-Flip-String-to-Monotone-Increasing/"/>
    <url>/2022/10/03/LC-Solution-926-Flip-String-to-Monotone-Increasing/</url>
    
    <content type="html"><![CDATA[<h1 id="926-Flip-String-to-Monotone-Increasing"><a href="#926-Flip-String-to-Monotone-Increasing" class="headerlink" title="926. Flip String to Monotone Increasing"></a><a href="https://leetcode.cn/problems/flip-string-to-monotone-increasing/">926. Flip String to Monotone Increasing</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如果一个二进制字符串，是以一些 <code>0</code>（可能没有 <code>0</code>）后面跟着一些 <code>1</code>（也可能没有 <code>1</code>）的形式组成的，那么该字符串是 <strong>单调递增</strong> 的。</p><p>给你一个二进制字符串 <code>s</code>，你可以将任何 <code>0</code> 翻转为 <code>1</code> 或者将 <code>1</code> 翻转为 <code>0</code> 。</p><p>返回使 <code>s</code> 单调递增的最小翻转次数。</p><p><strong>示例1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;00110&quot;</span><br>输出：<span class="hljs-number">1</span><br>解释：翻转最后一位得到 <span class="hljs-number">00111</span>.<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;010110&quot;</span><br>输出：<span class="hljs-number">2</span><br>解释：翻转得到 <span class="hljs-number">011111</span>，或者是 <span class="hljs-number">000111</span>。<br></code></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;00011000&quot;</span><br>输出：<span class="hljs-number">2</span><br>解释：翻转得到 <span class="hljs-number">00000000</span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s[i]</code> 为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：前缀和"><a href="#方法一：前缀和" class="headerlink" title="方法一：前缀和"></a>方法一：前缀和</h3><p>题目要求通过翻转 <code>0</code> 与 <code>1</code> 使得最后得到的二进制字符串为单调递增，</p><p>通过此可以想到：统计字符 <code>s[i]</code> 左边 <code>1</code> 数目，右边 <code>0</code> 的数目。将这些 <code>1</code> 与 <code>0</code> 翻转，最终的字符串 <code>s</code> 即可满足单调递增，翻转次数 &#x3D; 左边 <code>1</code> 的数目 + 右边 <code>0</code> 的数目</p><p>因此，该问题可以采用前缀和的思路解决。</p><ul><li><p>设置 <code>sum</code> 数组统计前缀和（长度为 <code>len(s) + 1</code> ）</p></li><li><p><code>sum[i]</code> 代表字符 <code>s[i]</code> 左边 <code>1</code> 的数目（不包含 <code>i</code> ）</p></li><li><p>通过 <code>sum[i]</code> 可计算得到 <code>s[i]</code> 右边 <code>0</code> 的数目（包含 <code>i</code>）</p><ul><li>右边 <code>0</code> 的数目为：<code>(len(s) - i) - (sum[len(s)] - sum[i])</code></li></ul></li></ul><p>遍历两次字符串 <code>s</code> ，求得最终答案</p><ul><li><p>第一次遍历：求得前缀和数组 <code>sum</code></p></li><li><p>第二次遍历：计算当前翻转次数（左边 <code>1</code> 的数目 + 右边 <code>0</code> 的数目）并与 <code>ans</code> 比较，取最小值。</p></li></ul><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minFlipsMonoIncr</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n, ans = <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-built_in">sum</span> = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>) <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">sum</span>[i] = <span class="hljs-built_in">sum</span>[i - <span class="hljs-number">1</span>] + (s[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n + <span class="hljs-number">1</span>):<br>            l_ones, r_zeros = <span class="hljs-built_in">sum</span>[i], n - i - (<span class="hljs-built_in">sum</span>[n] - <span class="hljs-built_in">sum</span>[i])<br>            ans = <span class="hljs-built_in">min</span>(ans, l_ones + r_zeros)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minFlipsMonoIncr</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">char</span>[] cs = s.toCharArray();<br>        <span class="hljs-type">int</span>[] sum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            sum[i] = sum[i - <span class="hljs-number">1</span>] + (cs[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">leftOnes</span> <span class="hljs-operator">=</span> sum[i], rightZeros = n - i - (sum[n] - sum[i]);<br>            ans = Math.min(ans, leftOnes + rightZeros);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二：优化前缀和"><a href="#方法二：优化前缀和" class="headerlink" title="方法二：优化前缀和"></a>方法二：优化前缀和</h3><p>方法一种提到：</p><ul><li><p><code>s[i]</code> 左边 <code>1</code> 的数目为 <code>sum[i]</code></p></li><li><p><code>s[i]</code> 右边 <code>0</code> 的数目为 <code>(len(s) - i) - (sum[len(s)] - sum[i])</code></p></li><li><p>遍历一轮 <code>s</code>，二者求和的最小值即为答案</p></li></ul><p>即 <code>left_ones + right_zeros = 2 * sum[i] - i + len(s) - sum[len(s)]</code></p><p>因此，只需保证 <code>2 * sum[i] - i</code> 为最小值，然后求得所有 <code>1</code> 的数目，即可得到最终的翻转次数，采用常数级空间复杂度即可实现。</p><p>注意：根据之前的定义，这里 <code>i</code> 的最大值仍然为 <code>len(s)</code></p><h4 id="Python3-1"><a href="#Python3-1" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minFlipsMonoIncr</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n, ans, l_ones = <span class="hljs-built_in">len</span>(s), inf, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>):<br>            ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-number">2</span> * l_ones - i)<br>            <span class="hljs-comment"># 防止越界</span><br>            <span class="hljs-keyword">if</span> i &lt; n:<br>                l_ones += s[i] == <span class="hljs-string">&#x27;1&#x27;</span><br>        <span class="hljs-keyword">return</span> ans + n - l_ones;<br></code></pre></td></tr></table></figure><h4 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minFlipsMonoIncr</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length(), ans = Integer.MAX_VALUE, leftOnes = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            ans = Math.min(ans, <span class="hljs-number">2</span> * leftOnes - i);<br>            <span class="hljs-keyword">if</span>(i &lt; n) &#123;<br>                leftOnes += s.charAt(i) == <span class="hljs-string">&#x27;1&#x27;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans + n - leftOnes;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第11篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 881. Boats to Save People</title>
    <link href="/2022/10/03/LC-Solution-881-Boats-to-Save-People/"/>
    <url>/2022/10/03/LC-Solution-881-Boats-to-Save-People/</url>
    
    <content type="html"><![CDATA[<h1 id="881-救生艇"><a href="#881-救生艇" class="headerlink" title="881. 救生艇"></a><a href="https://leetcode.cn/problems/boats-to-save-people/">881. 救生艇</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定数组 <code>people</code> 。<code>people[i]</code>表示第 <code>i</code> 个人的体重 ，<strong>船的数量不限</strong>，每艘船可以承载的最大重量为 <code>limit</code>。</p><p>每艘船最多可同时载两人，但条件是这些人的重量之和最多为 <code>limit</code>。</p><p>返回 <em>承载所有人所需的最小船数</em> 。</p><p><strong>示例1：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：people = [1,2], <span class="hljs-built_in">limit</span> = 3<br>输出：1<br>解释：1 艘船载 (1, 2)<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：people = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>], limit = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">3</span><br>解释：<span class="hljs-number">3</span> 艘船分别载 <span class="hljs-comment">(1, 2)</span>, <span class="hljs-comment">(2)</span> 和 <span class="hljs-comment">(3)</span><br></code></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：people = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>], limit = <span class="hljs-number">5</span><br>输出：<span class="hljs-number">4</span><br>解释：<span class="hljs-number">4</span> 艘船分别载 <span class="hljs-comment">(3)</span>, <span class="hljs-comment">(3)</span>, <span class="hljs-comment">(4)</span>, <span class="hljs-comment">(5)</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= people.length &lt;= 5 * 104</code></li><li><code>1 &lt;= people[i] &lt;= limit &lt;= 3 * 104</code></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：贪心-双指针"><a href="#方法一：贪心-双指针" class="headerlink" title="方法一：贪心 + 双指针"></a>方法一：贪心 + 双指针</h3><p>通过分析题意可以得出以下几点关键的信息：</p><ol><li><p>可用船数不限制</p></li><li><p>每艘船限乘2人，每搜船限制总重为<code>limit</code></p></li><li><p>返回结果与<code>people</code>数组的顺序无关</p></li></ol><p>为使得使用的船数最少，每搜船上的两个人的总重量最好 <strong>等于或尽可能接近</strong> <code>limit</code></p><p>因此，不难得出本题的思路：对<code>people</code>数组进行升序排序，双指针遍历<code>people</code>数组。</p><p>需要注意的一点：双指针<code>i</code>与<code>j</code>重合时，此时只剩余一个人，所以他单独乘一艘船。</p><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numRescueBoats</span>(<span class="hljs-params">self, people: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], limit: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        people.sort()<br>        i, j, ans = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(people) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt;= j:<br>            <span class="hljs-keyword">if</span> i == j:<br>                ans += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> people[i] + people[j] &lt;= limit:<br>                ans, i, j = ans + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                ans, j = ans + <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numRescueBoats</span><span class="hljs-params">(<span class="hljs-type">int</span>[] people, <span class="hljs-type">int</span> limit)</span> &#123;<br>        Arrays.sort(people);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = people.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i &lt;= j) &#123;<br>            <span class="hljs-keyword">if</span>(i == j) &#123;<br>                ans++;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(people[i] + people[j] &lt;= limit) &#123;<br>                ans++; i++; j--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ans++; j--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第10篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 1784 Check if Binary String Has at Most One Segment of Ones</title>
    <link href="/2022/10/03/LC-Solution-1784-Check-if-Binary-String-Has-at-Most-One-Segment-of-Ones/"/>
    <url>/2022/10/03/LC-Solution-1784-Check-if-Binary-String-Has-at-Most-One-Segment-of-Ones/</url>
    
    <content type="html"><![CDATA[<h1 id="1784-检查二进制字符串字段"><a href="#1784-检查二进制字符串字段" class="headerlink" title="1784. 检查二进制字符串字段"></a><a href="https://leetcode.cn/problems/check-if-binary-string-has-at-most-one-segment-of-ones/">1784. 检查二进制字符串字段</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个二进制字符串 <code>s</code> ，该字符串 <strong>不含前导零</strong> 。</p><p>如果 <code>s</code> 包含 <strong>零个或一个由连续的 ‘1’ 组成的字段</strong> ，返回 <code>true</code>​​​ 。否则，返回 <code>false</code></p><p>如果 <code>s</code> 中 <strong>由连续若干个 ‘1’ 组成的字段 数量不超过 1</strong>，返回 <code>true</code>​​​ 。否则，返回 <code>false</code></p><p><strong>示例1：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入：s = <span class="hljs-string">&quot;1001&quot;</span><br>输出：<span class="hljs-literal">false</span><br>解释：由连续若干个 <span class="hljs-string">&#x27;1&#x27;</span> 组成的字段数量为 <span class="hljs-number">2</span>，返回 <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;110&quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 100</code></li><li><code>s[i]</code>​​​​ 为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li><li><code>s[0]</code> 为 <code>&#39;1&#39;</code></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：简单模拟"><a href="#方法一：简单模拟" class="headerlink" title="方法一：简单模拟"></a>方法一：简单模拟</h3><p>题目已经明确给定<code>s[0] = &#39;1&#39;</code>，所以我们只需要找出<code>s</code>中的第一个字符<code>&#39;0&#39;</code>的下标。</p><ul><li><p>若字符串<code>s</code>中不存在<code>&#39;0&#39;</code>，那么一定全为<code>&#39;1&#39;</code>，返回<code>True</code></p></li><li><p>若字符串<code>s</code>中存在<code>&#39;0&#39;</code>，但是在它的后面不存在<code>&#39;1&#39;</code>，说明<code>s</code>中只有一个由连续的<code>&#39;1&#39;</code>组成的字段（因为<code>s[0] = &#39;1&#39;</code>），返回<code>True</code></p></li></ul><p>若不满足以上两点条件，直接返回<code>False</code></p><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkOnesSegment</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        idx = s.find(<span class="hljs-string">&#x27;0&#x27;</span>)<br>        <span class="hljs-keyword">if</span> idx == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s[idx:]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>采用三元表达式写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkOnesSegment</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> s.find(<span class="hljs-string">&#x27;0&#x27;</span>) == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s[s.find(<span class="hljs-string">&#x27;0&#x27;</span>):] <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkOnesSegment</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> s.indexOf(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">if</span>(idx == -<span class="hljs-number">1</span> || s.substring(idx).indexOf(<span class="hljs-string">&quot;1&quot;</span>) == -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>采用三元表达式写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkOnesSegment</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">return</span> s.indexOf(<span class="hljs-string">&quot;0&quot;</span>) == -<span class="hljs-number">1</span> || s.substring(s.indexOf(<span class="hljs-string">&quot;0&quot;</span>)).indexOf(<span class="hljs-string">&quot;1&quot;</span>) == -<span class="hljs-number">1</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第9篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 807. Max Increase to Keep City Skyline</title>
    <link href="/2022/10/03/LC-Solution-807-Max-Increase-to-Keep-City-Skyline/"/>
    <url>/2022/10/03/LC-Solution-807-Max-Increase-to-Keep-City-Skyline/</url>
    
    <content type="html"><![CDATA[<h1 id="807-保持城市天际线"><a href="#807-保持城市天际线" class="headerlink" title="807. 保持城市天际线"></a><a href="https://leetcode.cn/problems/max-increase-to-keep-city-skyline/">807. 保持城市天际线</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一座由 <code>n x n</code> 个街区组成的城市，每个街区都包含一座立方体建筑。给你一个下标从 <strong>0</strong> 开始的 <code>n x n</code> 整数矩阵 <code>grid</code> ，其中 <code>grid[r][c]</code> 表示坐落于 <code>r</code> 行 <code>c</code> 列的建筑物的 <strong>高度</strong> 。</p><p>城市的 <strong>天际线</strong> 是从远处观察城市时，所有建筑物形成的外部轮廓。从东、南、西、北四个主要方向观测到的 <strong>天际线</strong> 可能不同。</p><p>我们被允许为 <strong>任意数量的建筑物</strong> 的高度增加 <strong>任意增量（不同建筑物的增量可能不同）</strong> 。 高度为 0 的建筑物的高度也可以增加。然而，增加的建筑物高度 <strong>不能影响</strong> 从任何主要方向观察城市得到的 <strong>天际线</strong> 。</p><p>在 <strong>不改变</strong> 从任何主要方向观测到的城市 <strong>天际线</strong> 的前提下，返回建筑物可以增加的 <strong>最大高度增量总和</strong></p><p><strong>示例1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：grid = <span class="hljs-comment">[<span class="hljs-comment">[3,0,8,4]</span>,<span class="hljs-comment">[2,4,5,7]</span>,<span class="hljs-comment">[9,2,6,3]</span>,<span class="hljs-comment">[0,3,1,0]</span>]</span><br>输出：35<br>解释：建筑物的高度如上图中心所示。<br>用红色绘制从不同方向观看得到的天际线。<br>在不影响天际线的情况下，增加建筑物的高度：<br>gridNew = <span class="hljs-comment">[ <span class="hljs-comment">[8, 4, 8, 7]</span>,</span><br><span class="hljs-comment">            <span class="hljs-comment">[7, 4, 7, 7]</span>,</span><br><span class="hljs-comment">            <span class="hljs-comment">[9, 4, 8, 7]</span>,</span><br><span class="hljs-comment">            <span class="hljs-comment">[3, 3, 3, 3]</span> ]</span><br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：grid = <span class="hljs-string">[[0,0,0],[0,0,0],[0,0,0]]</span><br>输出：<span class="hljs-number">0</span><br>解释：增加任何建筑物的高度都会导致天际线的变化。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == grid.length</code></li><li><code>n == grid[r].length</code></li><li><code>2 &lt;= n &lt;= 50</code></li><li><code>0 &lt;= grid[r][c] &lt;= 100</code></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：贪心算法"><a href="#方法一：贪心算法" class="headerlink" title="方法一：贪心算法"></a>方法一：贪心算法</h3><p>分析题意不难得出，东南西北的视图即<code>天际线</code>是由每行每列的最大值决定的。</p><p>因此，每个建筑最终达到的高度不能超过其所在行与列的最大高度，更加具体地说，不能超过<code>min(该行最大高度, 该列最大高度)</code>。</p><ul><li><p>第一遍遍历：提前预处理出每一行与每一列对应的最大高度值</p></li><li><p>第二遍遍历：往<code>ans</code>结果中累加当前遍历的建筑可以增加的最大高度</p></li></ul><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxIncreaseKeepingSkyline</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans, n = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(grid)<br>        rowMax, colMax = [<span class="hljs-number">0</span>] * n, [<span class="hljs-number">0</span>] * n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                rowMax[i] = <span class="hljs-built_in">max</span>(rowMax[i], grid[i][j])<br>                colMax[j] = <span class="hljs-built_in">max</span>(colMax[j], grid[i][j])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                ans += <span class="hljs-built_in">min</span>(rowMax[i], colMax[j]) - grid[i][j]<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxIncreaseKeepingSkyline</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> grid.length;<br>        <span class="hljs-type">int</span>[] rowMax = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n], colMax = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                rowMax[i] = Math.max(rowMax[i], grid[i][j]);<br>                colMax[j] = Math.max(colMax[j], grid[i][j]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                ans += Math.min(rowMax[i], colMax[j]) - grid[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第8篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 781. Rabbits in Forest</title>
    <link href="/2022/10/03/LC-Solution-781-Rabbits-in-Forest/"/>
    <url>/2022/10/03/LC-Solution-781-Rabbits-in-Forest/</url>
    
    <content type="html"><![CDATA[<h1 id="781-森林中的兔子"><a href="#781-森林中的兔子" class="headerlink" title="781. 森林中的兔子"></a><a href="https://leetcode.cn/problems/rabbits-in-forest/">781. 森林中的兔子</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>森林中有未知数量的兔子。提问其中若干只兔子 “<strong>还有多少只兔子与你（指被提问的兔子）颜色相同?</strong>“ ，将答案收集到一个整数数组 <code>answers</code> 中，其中 <code>answers[i]</code> 是第 <code>i</code> 只兔子的回答。</p><p>给你数组 <code>answers</code> ，返回森林中兔子的最少数量。</p><p><strong>示例1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：answers = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>输出：<span class="hljs-number">5</span><br>解释：<br>两只回答了 <span class="hljs-string">&quot;1&quot;</span> 的兔子可能有相同的颜色，设为红色。 <br>之后回答了 <span class="hljs-string">&quot;2&quot;</span> 的兔子不会是红色，否则他们的回答会相互矛盾。<br>设回答了 <span class="hljs-string">&quot;2&quot;</span> 的兔子为蓝色。 <br>此外，森林中还应有另外 <span class="hljs-number">2</span> 只蓝色兔子的回答没有包含在数组中。 <br>因此森林中兔子的最少数量是 <span class="hljs-number">5</span> 只：<span class="hljs-number">3</span> 只回答的和 <span class="hljs-number">2</span> 只没有回答的。<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：answers </span>=<span class="hljs-string"> [10,10,10]</span><br><span class="hljs-string">输出：11</span><br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：找规律"><a href="#方法一：找规律" class="headerlink" title="方法一：找规律"></a>方法一：找规律</h3><p>举例分析：</p><ol><li><p>当数组为<code>[2, 2 ,2]</code>时，1种颜色 - 3只兔子</p></li><li><p>当数组为<code>[2, 2, 2, 2]</code>时，2种颜色 - 6只兔子（前三只兔子为一种颜色，最后一只兔子以及未被问到的另外两只不知名兔子为另一种颜色）</p></li><li><p>当数组为<code>[2, 2, 2, 2, 2, 2]</code>时，2种颜色 - 6只兔子（前三只兔子为一种颜色，后三只兔子为另一种颜色）</p></li><li><p>当数组为<code>[2, 2, 2, 2, 2, 2, 2]</code>时，3种颜色 - 9只兔子（1,2,3号兔子为色号1，4,5,6号兔子为色号2，7号兔子以及另外两只不知名兔子为色号3）</p></li><li><p>以此类推…</p></li></ol><p>经过分析，抽象为数学找规律的题目。</p><p>用哈希表统计同一个数字出现的频率。设<code>num</code>为哈希表的key，<code>freq</code>为哈希表的值。</p><p>将<code>freq</code>分为<code>freq // (num + 1)</code>个组，余数再单独分到另一个组。</p><p>举例：<code>[1, 1, 2, 2, 2, 2, 2]</code>数组统计存入哈希表后。一个键值对为<code>&#123;1: 2&#125;</code>，可以被分为<code>2 // (1 + 1) = 1</code>个组，正好整除。另一个键值对为<code>&#123;2: 4&#125;</code>，可以被分为<code>4 // (2 + 1) = 1</code>个组，剩余的2组成一个组。答案为每个键值对对应的组数乘以<code>num + 1</code>求和</p><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numRabbits</span>(<span class="hljs-params">self, answers: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dic = Counter(answers)<br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> num, freq <span class="hljs-keyword">in</span> dic.items():<br>            ans += freq // (num + <span class="hljs-number">1</span>) * (num + <span class="hljs-number">1</span>) <br>            <span class="hljs-keyword">if</span> freq % (num + <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>:<br>                ans += num + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第7篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 777. Swap Adjacent in LR String</title>
    <link href="/2022/10/03/LC-Solution-777-Swap-Adjacent-in-LR-String/"/>
    <url>/2022/10/03/LC-Solution-777-Swap-Adjacent-in-LR-String/</url>
    
    <content type="html"><![CDATA[<h1 id="777-在LR字符串中交换相邻字符"><a href="#777-在LR字符串中交换相邻字符" class="headerlink" title="777. 在LR字符串中交换相邻字符"></a><a href="https://leetcode.cn/problems/swap-adjacent-in-lr-string/">777. 在LR字符串中交换相邻字符</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个由 <code>&#39;L&#39;</code> , <code>&#39;R&#39;</code> 和 <code>&#39;X&#39;</code> 三个字符组成的字符串（例如<code>&quot;RXXLRXRXL&quot;</code>）中进行移动操作。一次移动操作指用一个<code>&quot;LX&quot;</code>替换一个<code>&quot;XL&quot;</code>，或者用一个<code>&quot;XR&quot;</code>替换一个<code>&quot;RX&quot;</code>。现给定起始字符串<code>start</code>和结束字符串<code>end</code>，请编写代码，当且仅当存在一系列移动操作使得<code>start</code>可以转换成<code>end</code>时， 返回<code>True</code>。</p><p><strong>示例：</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coq">输入: start = <span class="hljs-string">&quot;RXXLRXRXL&quot;</span>, <span class="hljs-keyword">end</span> = <span class="hljs-string">&quot;XRLXXRRLX&quot;</span><br>输出: True<br>解释:<br>我们可以通过以下几步将start转换成<span class="hljs-keyword">end</span>:<br>RXXLRXRXL -&gt;<br>XRXLRXRXL -&gt;<br>XRLXRXRXL -&gt;<br>XRLXXRRXL -&gt;<br>XRLXXRRLX<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= len(start) = len(end) &lt;= 10000</code>。</li><li><code>start</code>和<code>end</code>中的字符串仅限于<code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>和<code>&#39;X&#39;</code>。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：模拟"><a href="#方法一：模拟" class="headerlink" title="方法一：模拟"></a>方法一：模拟</h3><p>根据题意进行分析模拟，题目将每一个<code>XL</code>都替换成了<code>LX</code>，将每一个<code>RX</code>都替换成了<code>XR</code></p><p>通过找规律可发现，替换的过程可以理解为<code>L</code>与<code>R</code>移动的过程。</p><ul><li><p>当<code>L</code>的左边为<code>X</code>时，<code>L</code>可向左移动</p></li><li><p>当<code>R</code>的右边为<code>X</code>时，<code>R</code>可向右移动</p></li><li><p><code>L</code>与<code>R</code>无法互相穿过（因为<code>L</code>左和<code>R</code>右必须为<code>X</code>）</p><ul><li>可得知当<code>start</code>与<code>end</code>去掉<code>X</code>后，剩余字符必须相同，否则返回False</li></ul></li></ul><p>根据此规律，使用双指针<code>i</code>与<code>j</code>从头到尾遍历<code>start</code>与<code>end</code></p><p>找到<code>start</code>与<code>end</code>中<code>非X</code>的字符时则停止移动，进行判断</p><p>判断条件为：</p><ul><li><p>若<code>start[i] == L and i &lt; j</code>，又因<code>L</code>无法向右移动，直接返回False</p></li><li><p>若<code>start[i] == R and i &gt; j</code>，又因<code>R</code>无法向左移动，直接返回False</p></li></ul><p>当双指针遍历字符串结束后，说明中途未返回False，则最终返回True</p><p>注意：</p><p><code>if i != j and (start[i] == &#39;L&#39;) != (i &gt; j)</code>该行代码摘自<a href="https://leetcode.cn/u/endlesscheng/">灵山茶艾府</a>大佬的题解，相当于将两个<code>if</code>判断条件揉为一个，其本质为：</p><ul><li><p><code>if i &lt; j and start[i] == &#39;L&#39;: return False</code></p></li><li><p><code>if i &gt; j and start[i] == &#39;R&#39;: return False</code></p></li></ul><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canTransform</span>(<span class="hljs-params">self, start: <span class="hljs-built_in">str</span>, end: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> start.replace(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) != end.replace(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>): <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        n = <span class="hljs-built_in">len</span>(start)<br>        i = j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; n <span class="hljs-keyword">and</span> j &lt; n:<br>            <span class="hljs-keyword">while</span> i &lt; n <span class="hljs-keyword">and</span> start[i] == <span class="hljs-string">&#x27;X&#x27;</span>: i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> j &lt; n <span class="hljs-keyword">and</span> end[j] == <span class="hljs-string">&#x27;X&#x27;</span>: j += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i != j <span class="hljs-keyword">and</span> (start[i] == <span class="hljs-string">&#x27;L&#x27;</span>) != (i &gt; j): <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            i, j = i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canTransform</span><span class="hljs-params">(String start, String end)</span> &#123;<br>        <span class="hljs-keyword">if</span>(!start.replace(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).equals(end.replace(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> start.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i &lt; n &amp;&amp; j &lt; n) &#123;<br>            <span class="hljs-keyword">while</span>(i &lt; n &amp;&amp; start.charAt(i) == <span class="hljs-string">&#x27;X&#x27;</span>) i += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(j &lt; n &amp;&amp; end.charAt(j) == <span class="hljs-string">&#x27;X&#x27;</span>) j += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> ((i != j) &amp;&amp; ((start.charAt(i) == <span class="hljs-string">&#x27;L&#x27;</span>) != (i &gt; j))) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            i++; j++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第5篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 1694. Reformat Phone Number</title>
    <link href="/2022/10/03/LC-Solution-1694-Reformat-Phone-Number/"/>
    <url>/2022/10/03/LC-Solution-1694-Reformat-Phone-Number/</url>
    
    <content type="html"><![CDATA[<h1 id="1694-重新格式化电话号码"><a href="#1694-重新格式化电话号码" class="headerlink" title="1694. 重新格式化电话号码"></a><a href="https://leetcode.cn/problems/reformat-phone-number/">1694. 重新格式化电话号码</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个字符串形式的电话号码 <code>number</code> 。<code>number</code> 由数字、空格 <code>&#39; &#39;</code>、和破折号<code>&#39;-&#39;</code>组成。</p><p>请你按下述方式重新格式化电话号码。</p><ul><li><p>首先，删除 所有的空格和破折号。</p></li><li><p>其次，将数组从左到右 每 3 个一组 分块，直到 剩下 4 个或更少数字。剩下的数字将按下述规定再分块：</p><ul><li><p>2 个数字：单个含 2 个数字的块。</p></li><li><p>3 个数字：单个含 3 个数字的块。</p></li><li><p>4 个数字：两个分别含 2 个数字的块。</p></li></ul></li><li><p>最后用破折号将这些块连接起来。注意，重新格式化过程中 不应该 生成仅含 1 个数字的块，并且 最多 生成两个含 2 个数字的块。</p></li></ul><p>返回格式化后的电话号码。</p><p><strong>示例1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：number <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1-23-45 6&quot;</span><br>输出：<span class="hljs-string">&quot;123-456&quot;</span><br>解释：数字是 <span class="hljs-string">&quot;123456&quot;</span><br>步骤 <span class="hljs-number">1</span>：共有超过 <span class="hljs-number">4</span> 个数字，所以先取 <span class="hljs-number">3</span> 个数字分为一组。第 <span class="hljs-number">1</span> 个块是 <span class="hljs-string">&quot;123&quot;</span> 。<br>步骤 <span class="hljs-number">2</span>：剩下 <span class="hljs-number">3</span> 个数字，将它们放入单个含 <span class="hljs-number">3</span> 个数字的块。第 <span class="hljs-number">2</span> 个块是 <span class="hljs-string">&quot;456&quot;</span> 。<br>连接这些块后得到 <span class="hljs-string">&quot;123-456&quot;</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：number <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123 4-567&quot;</span><br>输出：<span class="hljs-string">&quot;123-45-67&quot;</span><br>解释：数字是 <span class="hljs-string">&quot;1234567&quot;</span>.<br>步骤 <span class="hljs-number">1</span>：共有超过 <span class="hljs-number">4</span> 个数字，所以先取 <span class="hljs-number">3</span> 个数字分为一组。第 <span class="hljs-number">1</span> 个块是 <span class="hljs-string">&quot;123&quot;</span> 。<br>步骤 <span class="hljs-number">2</span>：剩下 <span class="hljs-number">4</span> 个数字，所以将它们分成两个含 <span class="hljs-number">2</span> 个数字的块。这 <span class="hljs-number">2</span> 块分别是 <span class="hljs-string">&quot;45&quot;</span> 和 <span class="hljs-string">&quot;67&quot;</span> 。<br>连接这些块后得到 <span class="hljs-string">&quot;123-45-67&quot;</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：number <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123 4-5678&quot;</span><br>输出：<span class="hljs-string">&quot;123-456-78&quot;</span><br>解释：数字是 <span class="hljs-string">&quot;12345678&quot;</span> 。<br>步骤 <span class="hljs-number">1</span>：第 <span class="hljs-number">1</span> 个块 <span class="hljs-string">&quot;123&quot;</span> 。<br>步骤 <span class="hljs-number">2</span>：第 <span class="hljs-number">2</span> 个块 <span class="hljs-string">&quot;456&quot;</span> 。<br>步骤 <span class="hljs-number">3</span>：剩下 <span class="hljs-number">2</span> 个数字，将它们放入单个含 <span class="hljs-number">2</span> 个数字的块。第 <span class="hljs-number">3</span> 个块是 <span class="hljs-string">&quot;78&quot;</span> 。<br>连接这些块后得到 <span class="hljs-string">&quot;123-456-78&quot;</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例4：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：number <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12&quot;</span><br>输出：<span class="hljs-string">&quot;12&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例5：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：number = &quot;-<span class="hljs-string">-17</span><span class="hljs-string">-5</span> 229 35<span class="hljs-string">-39475</span> &quot;<br>输出：&quot;175<span class="hljs-string">-229</span><span class="hljs-string">-353</span><span class="hljs-string">-94</span><span class="hljs-string">-75</span>&quot;<br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：简单模拟"><a href="#方法一：简单模拟" class="headerlink" title="方法一：简单模拟"></a>方法一：简单模拟</h3><p>先预处理<code>number</code>字符串，去除字符串中除数字之外的字符。</p><p>定义<code>res</code>为字符串列表，其中的每一个字符串最终需要以<code>&#39;-&#39;</code>分割。</p><p>根据题意分析循环过程中的if条件（<code>i</code>表示当前遍历位置，<code>s</code>表示预处理后的字符串）：</p><ul><li><p>若当前位置<code>i + 4 == len(s)</code>，将<code>s[i:i+2]</code>与<code>s[i+2:i+4]</code>切片追加到<code>res</code>列表</p></li><li><p>否则，直接将<code>s[i:i+3]</code>切片追加到<code>res</code>列表</p><ul><li><p>这里隐藏了一点：<code>i + 2 == len(s)</code>的特殊情况已经考虑在else情况中：</p><ul><li>巧妙利用了Python的切片性质：右边界超出字符串长度时，直接将字符串长度作为右边界。</li></ul></li></ul></li></ul><p>理清模拟逻辑后，开始编写代码，注意循环的<code>step</code>为3，最后用<code>&#39;-&#39;</code>将res拼接。</p><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reformatNumber</span>(<span class="hljs-params">self, number: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        s = number.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        res = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s), <span class="hljs-number">3</span>):<br>            <span class="hljs-keyword">if</span> i + <span class="hljs-number">4</span> == <span class="hljs-built_in">len</span>(s):<br>                res.append(s[i:i + <span class="hljs-number">2</span>])<br>                res.append(s[i + <span class="hljs-number">2</span>:i + <span class="hljs-number">4</span>])   <br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                res.append(s[i: i + <span class="hljs-number">3</span>])<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-&#x27;</span>.join(res)<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第4篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution Interview Questions 01.08</title>
    <link href="/2022/10/03/LC-Solution-Interview-Questions-01-08/"/>
    <url>/2022/10/03/LC-Solution-Interview-Questions-01-08/</url>
    
    <content type="html"><![CDATA[<h1 id="01-08-Zero-Matrix-LCCI"><a href="#01-08-Zero-Matrix-LCCI" class="headerlink" title="01.08. Zero Matrix LCCI"></a><a href="https://leetcode.cn/problems/zero-matrix-lcci/">01.08. Zero Matrix LCCI</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一种算法，若M × N矩阵中某个元素为0，则将其所在的行与列清零。</p><p><strong>示例1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,1,1]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,0,1]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,1,1]</span></span><br><span class="hljs-comment">]</span><br>输出：<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,0,1]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[0,0,0]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,0,1]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[0,1,2,0]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[3,4,5,2]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[1,3,1,5]</span></span><br><span class="hljs-comment">]</span><br>输出：<br><span class="hljs-comment">[</span><br><span class="hljs-comment">  <span class="hljs-comment">[0,0,0,0]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[0,4,5,0]</span>,</span><br><span class="hljs-comment">  <span class="hljs-comment">[0,3,1,0]</span></span><br><span class="hljs-comment">]</span><br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：模拟"><a href="#方法一：模拟" class="headerlink" title="方法一：模拟"></a>方法一：模拟</h3><p>题目要求当二维数组中的某个元素值为0时，将其所在的行和列的全部元素置为0。</p><p>通过分析题意，可以想到采用标记数组存储符合题意的行与列。</p><ul><li><p>第一次遍历：标记行与列</p></li><li><p>第二次遍历：对标记的行与列中的元素进行修改</p></li></ul><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setZeroes</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        row = [<span class="hljs-literal">False</span>] * <span class="hljs-built_in">len</span>(matrix)<br>        col = [<span class="hljs-literal">False</span>] * <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])):<br>                <span class="hljs-keyword">if</span> matrix[i][j] == <span class="hljs-number">0</span>:<br>                    row[i] = col[j] = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])):<br>                matrix[i][j] = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> row[i] == <span class="hljs-literal">True</span> <span class="hljs-keyword">or</span> col[j] == <span class="hljs-literal">True</span> <span class="hljs-keyword">else</span> matrix[i][j]<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> matrix.length, n = matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">boolean</span>[] row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[m], col = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span>(matrix[i][j] == <span class="hljs-number">0</span>) &#123;<br>                    row[i] = col[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span>(row[i] == <span class="hljs-literal">true</span> || col[j] == <span class="hljs-literal">true</span>) &#123;<br>                    matrix[i][j] = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第3篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 3. Longest Substring Without Repeating Characters</title>
    <link href="/2022/10/03/LC-Solution-3-Longest-Substring-Without-Repeating-Characters/"/>
    <url>/2022/10/03/LC-Solution-3-Longest-Substring-Without-Repeating-Characters/</url>
    
    <content type="html"><![CDATA[<h1 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例1：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;abcabcbb&quot;</span><br><span class="hljs-section">输出: 3 </span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;bbbbb&quot;</span><br><span class="hljs-section">输出: 1</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></code></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;pwwkew&quot;</span><br><span class="hljs-section">输出: 3</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br>     请注意，你的答案必须是 子串 的长度，<span class="hljs-string">&quot;pwke&quot;</span> 是一个子序列，不是子串。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><h3 id="方法一：滑动窗口"><a href="#方法一：滑动窗口" class="headerlink" title="方法一：滑动窗口"></a>方法一：滑动窗口</h3><p>题目要求从给定字符串<code>s</code>中找出不包含重复字符的最长子串的长度</p><p>由于子串是连续的，可以想到采用滑动窗口解决该问题。</p><p>思路如下：</p><ul><li><p>采用双指针<code>i</code>与<code>j</code>作为滑动窗口的左端点与右端点，初始值为0</p></li><li><p>采用哈希表记录已经遍历过的字符。其<code>key</code>为字符本身，<code>value</code>为当前字符对应的下标</p></li><li><p>设<code>maxLen</code>为不包含重复字符的最长子串的长度</p></li><li><p>从头到尾遍历字符串<code>s</code></p><ol><li>判断哈希表是否存储当前字符<code>c</code></li></ol><ul><li><p>若哈希表已存储当前字符<code>c</code></p><ul><li><p>需要收缩滑动窗口，即更新滑动窗口左端点<code>i</code>的位置</p><ul><li><p>此时，左端点<code>i</code>有两种选择，第一种为保持<code>i</code>不变，第二种为将其更新为哈希表中当前字符<code>c</code>对应的下标再加1</p><ol><li><p>如果当前滑动窗口不包含当前字符<code>c</code>但哈希表中却存储着<code>c</code>，则需要选择第一种更新方案。例如<code>abba</code>字符串。</p></li><li><p>如果当前滑动窗口包含当前字符<code>c</code>，则需要选择第二种更新方案。例如<code>abca</code>字符串。</p></li></ol></li></ul><p>. 为综合以上两种更新方案，左端点<code>i</code>更新时区二者最大值即可。</p></li></ul></li></ul><ol start="2"><li><p>更新哈希表</p></li><li><p>比较当前滑动窗口长度与<code>maxLen</code>的大小，并为<code>maxLen</code>赋值</p></li><li><p>滑动窗口向右滑动，<code>j</code>自增</p></li></ol></li></ul><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        dic = defaultdict(<span class="hljs-built_in">int</span>)<br>        maxlen, left = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> s[i] <span class="hljs-keyword">in</span> dic:<br>                left = <span class="hljs-built_in">max</span>(dic[s[i]] + <span class="hljs-number">1</span>, left)<br>            dic[s[i]] = i<br>            maxlen = <span class="hljs-built_in">max</span>(maxlen, i - left + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> maxlen<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">if</span>(s.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = s.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, curLen = <span class="hljs-number">0</span>;<br>        Set&lt;Character&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            curLen++;<br>            <span class="hljs-keyword">while</span>(set.contains(s.charAt(i))) &#123;<br>                set.remove(s.charAt(left));<br>                left++;<br>                curLen--;<br>            &#125;<br>            maxLen = Math.max(curLen, maxLen);<br>            set.add(s.charAt(i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxLen;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第6篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 2. Add Two Nums</title>
    <link href="/2022/10/03/LC-Solution-2-Add-Two-Nums/"/>
    <url>/2022/10/03/LC-Solution-2-Add-Two-Nums/</url>
    
    <content type="html"><![CDATA[<h1 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a><a href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例1：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[2,4,3]</span>, l2 = <span class="hljs-comment">[5,6,4]</span><br>输出：<span class="hljs-comment">[7,0,8]</span><br>解释：342 + 465 = 807.<br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：l1 = <span class="hljs-comment">[0]</span>, l2 = <span class="hljs-comment">[0]</span><br>输出：<span class="hljs-comment">[0]</span><br></code></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：l1 = [<span class="hljs-number">9,9,9,9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>], l2 = [<span class="hljs-number">9,9,9,9</span>]<br>输出：[<span class="hljs-number">8,9,9,9</span>,<span class="hljs-number">0,0,0,1</span>]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：链表-数学-模拟"><a href="#方法一：链表-数学-模拟" class="headerlink" title="方法一：链表 + 数学 + 模拟"></a>方法一：链表 + 数学 + 模拟</h3><p>此题可直接理解为数学中的竖式相加</p><p>链表从左至右可以理解为从低位到高位，因此依次遍历链表，同一位置直接相加即可</p><p>设当前两个链表相同位置上的数分别为<code>x1</code>与<code>x2</code>，其进位值为<code>carry</code></p><p>进行相加之后，<code>sum</code>为<code>x1 + x2 + carry</code>，则</p><ul><li><p>结果链表的当前值<code>head.val = sum % 10</code>，添加至结果链表，链表前移</p></li><li><p>新的进位值<code>carry = sum // 10</code></p></li></ul><p>依次类推，继续前移链表节点，直至两链表遍历结束。</p><p>注意：遍历结束之后，需要判断最后的<code>carry</code>是否为1</p><ul><li>若最后的<code>carry == 1</code>，则说明需要再向上进一位</li></ul><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params">self, l1: <span class="hljs-type">Optional</span>[ListNode], l2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        res = head = <span class="hljs-literal">None</span><br>        carry = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> l1 <span class="hljs-keyword">or</span> l2:<br>            v1 = l1.val <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            v2 = l2.val <span class="hljs-keyword">if</span> l2 <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            <span class="hljs-built_in">sum</span> = v1 + v2 + carry<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> res:<br>                res = head = ListNode(<span class="hljs-built_in">sum</span> % <span class="hljs-number">10</span>)<br>            <span class="hljs-keyword">else</span>:<br>                head.<span class="hljs-built_in">next</span> = ListNode(<span class="hljs-built_in">sum</span> % <span class="hljs-number">10</span>)<br>                head = head.<span class="hljs-built_in">next</span><br>            carry = <span class="hljs-built_in">sum</span> // <span class="hljs-number">10</span><br>            <span class="hljs-keyword">if</span> l1:<br>                l1 = l1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> l2:<br>                l2 = l2.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> carry &gt; <span class="hljs-number">0</span>:<br>            head.<span class="hljs-built_in">next</span> = ListNode(carry)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, head = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> l1 == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : l1.val;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> l2 == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : l2.val;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> v1 + v2 + carry;<br>            <span class="hljs-keyword">if</span>(res == <span class="hljs-literal">null</span>) &#123;<br>                res = head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                head.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>                head = head.next;<br>            &#125;<br>            carry = sum / <span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">if</span>(l1 != <span class="hljs-literal">null</span>) l1 = l1.next;<br>            <span class="hljs-keyword">if</span>(l2 != <span class="hljs-literal">null</span>) l2 = l2.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(carry &gt; <span class="hljs-number">0</span>) &#123;<br>            head.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第2篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC-Solution 1. Two Sum</title>
    <link href="/2022/10/03/LC-Solution-1-Two-Sum/"/>
    <url>/2022/10/03/LC-Solution-1-Two-Sum/</url>
    
    <content type="html"><![CDATA[<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">1.两数之和</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em>  的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重lt复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,7,11,15]</span>, target = 9<br>输出：<span class="hljs-comment">[0,1]</span><br>解释：因为 nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> == 9 ，返回 <span class="hljs-comment">[0, 1]</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,2,4]</span>, target = 6<br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,3]</span>, target = 6<br>输出：<span class="hljs-comment">[0,1]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p>进阶：你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：哈希表"><a href="#方法一：哈希表" class="headerlink" title="方法一：哈希表"></a>方法一：哈希表</h3><p>对数组进行遍历，用哈希表存放数组值及其对应的下标值。</p><ul><li><code>key</code> &#x3D;&gt; 元素值， <code>value</code> &#x3D;&gt; 元素值对应的下标值</li></ul><p>当发现<code>target - nums[i]</code> 即 <code>目标值与当前值之差</code> 是否在哈希表中出现过</p><ul><li><p>若出现过，则说明找到了目标值，直接返回即可</p></li><li><p>若未出现，继续遍历</p></li></ul><p>核心思路为<code>空间换时间</code>，若不采用哈希表，则双重for循环朴素解法时间复杂度为<code>O(n^2)</code></p><p>在循环遍历的过程中确定<code>nums[i]</code>为当前数，然后在哈希表中查找该数之前是否存在一个数为<code>target - nums[i]</code>。</p><h4 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], t: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        dic = defaultdict(<span class="hljs-built_in">int</span>)<br>        <span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            x = t - v<br>            <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> dic:<br>                <span class="hljs-keyword">return</span> [dic[x], i]<br>            dic[v] = i<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> t) &#123;<br>        HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(map.containsKey(t - nums[i])) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;map.get(t - nums[i]), i&#125;;<br>            map.put(nums[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Encouragement"><a href="#Encouragement" class="headerlink" title="Encouragement"></a>Encouragement</h2><p>目前就读于新加坡国立大学，转码菜鸡一枚。</p><p>决心通过日更一篇题解激励自己坚持刷题，坚持学习算法。</p><p>这是我搭建<a href="https://github.com/ltyzzzxxx/Leetcode-Everyday">Leetcode-Everyday</a>仓库后发布の第1篇题解，欢迎各位star并提出Issue~</p><p>点击<a href="https://leetcode.cn/u/ltyzzz/">这里</a>，进入我的个人Leetcode主页~</p>]]></content>
    
    
    <categories>
      
      <category>Leetcode题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
